Problem link : {https://www.codingninjas.com/studio/problems/bubble-sort_980524?source=youtube&campaign=love_babbar_codestudio2&utm_source=youtube&utm_medium=affiliate&utm_campaign=love_babbar_codestudio2&leftPanelTabValue=PROBLEM}

Code in cpp :

#include <bits/stdc++.h> 
void bubbleSort(vector<int>& arr, int n)
{   
    // Write your code here.
    //loop for n-1 rounds
    for(int i=0; i<n-1; i++){
        bool swapped = false; //means there has not any swapping happend till now

        //setting j as first index itself and if prev elem bigger than current, swap them in between
        for(int j=0; j<n-i-1; j++){
            if(arr[j]>arr[j+1]){
                swap(arr[j],arr[j+1]);
                swapped = true; //means it has happend now
            }
        }
        if(swapped == false){
        break; //that means there has not any swap happened, i.e. array is already sorted so no means to run the rest of the loop over it
        }
    }
}

Time Complexity:

Best Case: O(n)

The best-case time complexity occurs when the input array is already sorted. 
In such cases, Bubble Sort can make a single pass through the array and detect that no swaps are needed. 
The algorithm can then terminate, resulting in a linear time complexity of O(n).

Average Case: O(n^2)

The average-case time complexity of Bubble Sort is O(n^2). This is because, 
in each pass through the array, the algorithm compares and swaps adjacent elements until the entire array is sorted.

Worst Case: O(n^2)

The worst-case time complexity is also O(n^2). 
This occurs when the input array is in reverse order, and Bubble Sort requires the maximum number of comparisons and 
swaps to sort the array.

Space Complexity:

Bubble Sort has a space complexity of O(1).

Similar to Selection Sort, Bubble Sort is an in-place sorting algorithm. 
It doesn't require additional memory proportional to the input size, and its space complexity is constant, O(1). 
The sorting is done by swapping elements within the input array.


In summary, Bubble Sort has a time complexity of O(n^2) in the average and worst cases, making it less efficient for large 
datasets compared to more advanced sorting algorithms. The best-case time complexity is O(n), but this scenario is less common in 
practice. Bubble Sort's advantage lies in its simplicity and minimal space requirements.
