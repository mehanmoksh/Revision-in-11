Problem link : {https://www.codingninjas.com/studio/problems/selection-sort_981162?leftPanelTabValue=PROBLEM}

Code in cpp :

#include <bits/stdc++.h> 
void selectionSort(vector<int>& arr, int n)
{   
    // Write your code here.
    //loop for n-1 rounds
    for(int i=0; i<n-1; i++){
        int smallest = i; //set the current index as the smallest 
        //now run a loop from next element
        //including all the elements, to check if any element exists,
        //smaller than the already set one 
        for(int j=i+1; j<n; j++){
            if(arr[j]<arr[smallest]){
                smallest = j; //then copy its index in it
            }
        }

        //now swap the smallest one with current positioned element
        swap(arr[i],arr[smallest]);
    }
}

Time Complexity:

Best Case: O(n^2)

The best-case time complexity occurs when the input array is already sorted. 
However, even in the best case, Selection Sort performs a quadratic number of comparisons and swaps, 
resulting in a time complexity of O(n^2).

Average Case: O(n^2)

The average-case time complexity is also O(n^2). Selection Sort has nested loops for comparisons and swaps, 
making the performance dependent on the square of the input size.

Worst Case: O(n^2)

The worst-case time complexity of Selection Sort is O(n^2). 
This happens when the array is in reverse order, and the algorithm has to perform the maximum number of comparisons and swaps.

Space Complexity:

Selection Sort has a space complexity of O(1).
Selection Sort is an in-place sorting algorithm, meaning it doesn't require additional memory proportional to the input size. 
The space complexity is constant, O(1), as the algorithm performs swaps 
directly within the input array without using additional data structures.

In summary, Selection Sort has a time complexity of O(n^2) in all cases, making it less efficient than more advanced sorting algorithms
for large datasets. However, it has a space complexity of O(1), which can be an advantage when memory usage is a critical factor.
